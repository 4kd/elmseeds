{-
   This file was automatically generated by elm-graphql.
-}


module StarWars exposing (queryFriends, QueryFriends, Episode)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode)


type Episode
    = EMPIRE
    | JEDI
    | NEWHOPE


endpointUrl : String
endpointUrl =
    "http://localhost:4000/q"


type alias QueryFriends =
    { human :
        { name : Maybe String
        , home_planet : Maybe String
        , appears_in : List Episode
        , friends :
            List
                { id : String
                , name : Maybe String
                }
        }
    }


queryFriends :
    { id : String
    }
    -> Task Http.Error QueryFriends
queryFriends params =
    let
        graphQLQuery =
            """query queryFriends($id: String!) { human(id: $id) { name home_planet appears_in friends { id name } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "id", Json.Encode.string params.id )
                    ]
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "queryFriends" graphQLParams queryFriendsDecoder


queryFriendsDecoder : Decoder QueryFriends
queryFriendsDecoder =
    map QueryFriends
        ("human"
            := (map (\name home_planet appears_in friends -> { name = name, home_planet = home_planet, appears_in = appears_in, friends = friends }) (maybe ("name" := string))
                    `apply` (maybe ("home_planet" := string))
                    `apply` ("appears_in" := list episodeDecoder)
                    `apply`
                        ("friends"
                            := (list
                                    (map (\id name -> { id = id, name = name }) ("id" := string)
                                        `apply` (maybe ("name" := string))
                                    )
                               )
                        )
               )
        )


episodeDecoder : Decoder Episode
episodeDecoder =
    customDecoder string
        (\s ->
            case s of
                "EMPIRE" ->
                    Ok EMPIRE

                "JEDI" ->
                    Ok JEDI

                "NEWHOPE" ->
                    Ok NEWHOPE

                _ ->
                    Err "Unknown Episode"
        )
